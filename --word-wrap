%!PS-Adobe-3.0
%%BoundingBox: 24 24 571 818
%%Title: Enscript Output
%%For: Izumi Hiroshima
%%Creator: GNU Enscript 1.6.6
%%CreationDate: Thu Jul 16 13:26:12 2020
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6 6
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6 6
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-enscript 1.6 6
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Roman

% Fonts.
/Times-Bold /HeaderFont-Bold MF
/HeaderDateF /HeaderFont-Bold findfont 12 scalefont def

/Times-Roman /HeaderFont-Times MF
/HeaderHDRF /HeaderFont-Times findfont 14 scalefont def

/HeaderPageNumF /Helvetica-Bold findfont 28.8 scalefont def

/do_header {	% print enscript header
  gsave
    d_header_x d_header_y translate

    % light bar
    0 0 d_header_w d_header_h 2 div Box
    .95 setgray fill

    % dark gray boxes
    /dbw d_header_h 2 mul def	% dark box width
    /dbc .7 def			% dark box color

    % left dark box.
    0 0 dbw d_header_h Box
    dbc setgray fill

    0 setgray 
    HeaderDateF setfont
    moddatestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 2 div 2 add moveto show
    modtimestr dup stringwidth pop dbw exch sub 2 div 
    d_header_h 5 div moveto show

    % right dark box
    d_header_w dbw sub 0 dbw d_header_h Box
    dbc setgray fill

    HeaderPageNumF setfont
    1 setgray
    pagenumstr dup
    stringwidth pop dbw exch sub 2 div d_header_w dbw sub add
    d_header_h .2 mul moveto show

    % filename
    0 setgray 
    HeaderHDRF setfont
    d_header_w fname stringwidth pop sub 2 div d_header_h 8 div moveto
    fname show

    % user supplied header string.
    user_header_p {
      /h d_header_h 8 div 5 mul def

      % Implement strict enscript compatibility.
      user_header_center_str () eq user_header_right_str () eq and {
        d_header_w user_header_left_str stringwidth pop sub 2 div 
        h moveto user_header_left_str show
      } {
        dbw 5 add h moveto user_header_left_str show

        d_header_w user_header_center_str stringwidth pop sub 2 div 
        h moveto user_header_center_str show

	d_header_w dbw sub 5 sub user_header_right_str stringwidth pop
	sub h moveto user_header_right_str show
      } ifelse
    } if

  grestore
} def
%%EndResource
/d_page_w 547 def
/d_page_h 794 def
/d_header_x 0 def
/d_header_y 758 def
/d_header_w 547 def
/d_header_h 36 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 547 def
/d_footer_h 0 def
/d_output_w 547 def
/d_output_h 758 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
24 24 translate
/pagenum 1 def
/fname (cmd/web/handlers.go) def
/fdir (cmd/web) def
/ftail (handlers.go) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (07/16/20) def
/modtimestr (13:19:40) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(package main) s
5 723 M
(import \() s
5 712 M
(    "bytes") s
5 701 M
(    "encoding/json") s
5 690 M
(    "errors") s
5 679 M
(    "fmt") s
5 668 M
(    "html/template") s
5 657 M
(    "net/http") s
5 646 M
(    "path/filepath") s
5 635 M
(    "strconv") s
5 613 M
(    "github.com/gbih/snippetbox/pkg/models") s
5 602 M
(\)) s
5 580 M
(func \(nfs neuteredFileSystem\) Open\(path string\) \(http.File, error\) {) s
5 569 M
(    f, err := nfs.fs.Open\(path\)) s
5 558 M
(    if err != nil {) s
5 547 M
(        return nil, err) s
5 536 M
(    }) s
5 514 M
(    s, err := f.Stat\(\)) s
5 503 M
(    if s.IsDir\(\) {) s
5 492 M
(        index := filepath.Join\(path, "index.html"\)) s
5 481 M
(        if _, err := nfs.fs.Open\(index\); err != nil {) s
5 470 M
(            closeErr := f.Close\(\)) s
5 459 M
(            if closeErr != nil {) s
5 448 M
(                return nil, closeErr) s
5 437 M
(            }) s
5 415 M
(            return nil, err) s
5 404 M
(        }) s
5 393 M
(    }) s
5 371 M
(    return f, nil) s
5 360 M
(}) s
5 338 M
(//----------) s
5 316 M
(// API Usage: curl -i localhost:4000/api/v1/test) s
5 294 M
(func \(app *application\) apiTest\(w http.ResponseWriter, r *http.Request\) {) s
5 283 M
(    data := []struct {) s
5 272 M
(        Name     string `json:"name"`) s
5 261 M
(        Location string `json:"location"`) s
5 250 M
(    }{) s
5 239 M
(        {"George", "\346\\227\245\346\\234\254"},) s
5 228 M
(        {"Izumi", "\350\266\\212\345\276\\214\346\271\257\346\262\242"},) s
5 217 M
(    }) s
5 195 M
(    js, err := json.MarshalIndent\(data, "", "\\t"\)) s
5 184 M
(    if err != nil {) s
5 173 M
(        http.Error\(w, err.Error\(\), http.StatusInternalServerError\)) s
5 162 M
(        return) s
5 151 M
(    }) s
5 140 M
(    w.Header\(\).Set\("Content-Type", "application/json; charset=utf-8"\)) s
5 129 M
(    w.Write\(js\)) s
5 118 M
(}) s
5 96 M
(//----------) s
5 74 M
(// Example to show explicit code flow) s
5 52 M
(func \(app *application\) homeOriginal\(w http.ResponseWriter, r *http.Request\) {) s
5 30 M
(    s, err := app.snippets.Latest\(\)) s
5 19 M
(    if err != nil {) s
5 8 M
(        app.serverError\(w, err\)) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
24 24 translate
/pagenum 2 def
/fname (cmd/web/handlers.go) def
/fdir (cmd/web) def
/ftail (handlers.go) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (07/16/20) def
/modtimestr (13:19:40) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(        return) s
5 734 M
(    }) s
5 712 M
(    files := []string{) s
5 701 M
(        "./ui/html/home.pageOriginal.html",) s
5 690 M
(        "./ui/html/base.layout.html",) s
5 679 M
(        "./ui/html/footer.partial.html",) s
5 668 M
(    }) s
5 646 M
(    // Create a FuncMap with which to register the function.) s
5 635 M
(    funcMap := template.FuncMap{) s
5 624 M
(        // "humanDate" is the function name created in templates.go,) s
5 613 M
(        //  to be called in the template text.) s
5 602 M
(        "humanDate": humanDate,) s
5 591 M
(    }) s
5 569 M
(    // Create a template, add the function map, and parse the text.) s
5 558 M
(    ts, err := template.New\("base"\).Funcs\(funcMap\).ParseFiles\(files...\)) s
5 547 M
(    if err != nil {) s
5 536 M
(        app.serverError\(w, err\)) s
5 525 M
(        return) s
5 514 M
(    }) s
5 492 M
(    // As soon as we begin adding dynamic behavior to our HTML templates) s
5 481 M
(    // there\342\\200\\231s a risk of encountering runtime errors. We want to avoid) s
5 470 M
(    // the use-case of the template compiling ok, but throwing a run-time error.) s
5 459 M
(    // Essentially, To fix this we need to make the template render a two-stage) s
5 448 M
(    // process. First, we should make a trial-render by writing the template) s
5 437 M
(    // into a buffer. If this fails, we can respond to the user with an error) s
5 426 M
(    // message. But if it works, we can then write the contents of the buffer) s
5 415 M
(    // to our http.ResponseWriter.) s
5 393 M
(    // Initialize a new buffer.) s
5 382 M
(    buf := new\(bytes.Buffer\)) s
5 360 M
(    // Write the template to the buffer, instead of straight to the) s
5 349 M
(    // http.ResponseWriter. If there's an error, call our serverError helper) s
5 338 M
(    // and then return.) s
5 327 M
(    err = ts.Execute\(buf, &templateData{) s
5 316 M
(        Snippets: s,) s
5 305 M
(    }\)) s
5 294 M
(    if err != nil {) s
5 283 M
(        app.serverError\(w, err\)) s
5 272 M
(        return) s
5 261 M
(    }) s
5 239 M
(    // Write the contents of the buffer to the http.ResponseWriter. Again, this) s
5 228 M
(    // is another time where we pass our http.ResponseWriter to a function that) s
5 217 M
(    // takes an io.Writer.) s
5 206 M
(    buf.WriteTo\(w\)) s
5 184 M
(    // OLD:) s
5 173 M
(    // err = ts.Execute\(w, &templateData{) s
5 162 M
(    //  Snippets: s,) s
5 151 M
(    // }\)) s
5 140 M
(    // if err != nil {) s
5 129 M
(    //  app.serverError\(w, err\)) s
5 118 M
(    // }) s
5 96 M
(}) s
5 74 M
(//----------) s
5 52 M
(func \(app *application\) home\(w http.ResponseWriter, r *http.Request\) {) s
5 41 M
(    if r.URL.Path != "/" {) s
5 30 M
(        app.notFound\(w\)) s
5 19 M
(        return) s
5 8 M
(    }) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
24 24 translate
/pagenum 3 def
/fname (cmd/web/handlers.go) def
/fdir (cmd/web) def
/ftail (handlers.go) def
% User defined strings:
/pagenumstr (3) def
/moddatestr (07/16/20) def
/modtimestr (13:19:40) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 734 M
(    s, err := app.snippets.Latest\(\)) s
5 723 M
(    if err != nil {) s
5 712 M
(        app.serverError\(w, err\)) s
5 701 M
(        return) s
5 690 M
(    }) s
5 668 M
(    // New code) s
5 657 M
(    app.render\(w, r, "home.page.html", &templateData{) s
5 646 M
(        Snippets: s,) s
5 635 M
(    }\)) s
5 613 M
(    /*) s
5 602 M
(        Note:) s
5 591 M
(        1.  Old template parsing and execution code refactored out, moved to) s
5 580 M
(        templates.go in this function:) s
5 569 M
(        newTemplateCache\(dir string\) \(map[string]*template.Template, error\)) s
5 547 M
(        2. This cache is initialized in the main\(\) function and made) s
5 536 M
(        available to handlers as a dependency via the application struct.) s
5 514 M
(            type application struct {) s
5 503 M
(                templateCache map[string]*template.Template) s
5 492 M
(            }) s
5 470 M
(        and added as to the application dependencies) s
5 459 M
(            app := &application{) s
5 448 M
(                templateCache: templateCache,) s
5 437 M
(            }) s
5 415 M
(        So now we have an in-memory cache of the relevant template set for) s
5 404 M
(        each of our pages, and our handlers have access to this cache via) s
5 393 M
(        the application struct.) s
5 371 M
(        Now, create a helper render method so that we can easily render) s
5 360 M
(        the templates from the cache.) s
5 349 M
(        File: cmd/web/helpers.go) s
5 327 M
(        func \(app *application\) render\() s
5 316 M
(                w http.ResponseWriter,) s
5 305 M
(                r *http.Request,) s
5 294 M
(                name string,) s
5 283 M
(                td *templateData\) { ... }) s
5 261 M
(        Now, we can access these cached templates via the render helper function:) s
5 250 M
(        Use the new render helper.) s
5 239 M
(        app.render\(w, r, "home.page.tmpl", &templateData{) s
5 228 M
(            Snippets: s,) s
5 217 M
(        }\)) s
5 206 M
(    */) s
5 195 M
(    /*) s
5 184 M
(        Old code:) s
5 173 M
(        data := &templateData{Snippets: s}) s
5 151 M
(        files := []string{) s
5 140 M
(            "./ui/html/home.page.html",) s
5 129 M
(            "./ui/html/base.layout.html",) s
5 118 M
(            "./ui/html/footer.partial.html",) s
5 107 M
(        }) s
5 85 M
(        ts, err := template.ParseFiles\(files...\)) s
5 74 M
(        if err != nil {) s
5 63 M
(            app.serverError\(w, err\)) s
5 52 M
(            return) s
5 41 M
(        }) s
5 19 M
(        err = ts.Execute\(w, data\)) s
5 8 M
(        if err != nil {) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
24 24 translate
/pagenum 4 def
/fname (cmd/web/handlers.go) def
/fdir (cmd/web) def
/ftail (handlers.go) def
% User defined strings:
/pagenumstr (4) def
/moddatestr (07/16/20) def
/modtimestr (13:19:40) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(            app.serverError\(w, err\)) s
5 734 M
(        }) s
5 723 M
(    */) s
5 712 M
(}) s
5 690 M
(// API Usage : curl -i localhost:4000/api/v1/home) s
5 668 M
(func \(app *application\) apiHome\(w http.ResponseWriter, r *http.Request\) {) s
5 646 M
(    s, err := app.snippets.Latest\(\)) s
5 635 M
(    if err != nil {) s
5 624 M
(        app.serverError\(w, err\)) s
5 613 M
(        return) s
5 602 M
(    }) s
5 580 M
(    js, err := json.MarshalIndent\(s, "", "\\t"\)) s
5 569 M
(    if err != nil {) s
5 558 M
(        http.Error\(w, err.Error\(\), http.StatusInternalServerError\)) s
5 547 M
(        return) s
5 536 M
(    }) s
5 514 M
(    w.Header\(\).Set\("Content-Type", "application-json; charset=UTF-8"\)) s
5 503 M
(    w.Write\(js\)) s
5 492 M
(}) s
5 470 M
(//----------) s
5 448 M
(func \(app *application\) showSnippet\(w http.ResponseWriter, r *http.Request\) {) s
5 437 M
(    id, err := strconv.Atoi\(r.URL.Query\(\).Get\("id"\)\)) s
5 426 M
(    if err != nil || id < 1 {) s
5 415 M
(        app.notFound\(w\)) s
5 404 M
(        return) s
5 393 M
(    }) s
5 371 M
(    s, err := app.snippets.Get\(id\)) s
5 360 M
(    if err != nil {) s
5 349 M
(        if errors.Is\(err, models.ErrNoRecord\) {) s
5 338 M
(            app.notFound\(w\)) s
5 327 M
(        } else {) s
5 316 M
(            app.serverError\(w, err\)) s
5 305 M
(        }) s
5 294 M
(        return) s
5 283 M
(    }) s
5 261 M
(    // Manual template parsing and execution code refactored out) s
5 239 M
(    app.render\(w, r, "show.page.html", &templateData{) s
5 228 M
(        Snippet: s,) s
5 217 M
(    }\)) s
5 195 M
(}) s
5 173 M
(// API Usage: curl -i 'http://localhost:4000/api/v1/snippet?id=1') s
5 151 M
(func \(app *application\) apiShowSnippet\(w http.ResponseWriter, r *http.Request\) {) s
5 140 M
(    id, err := strconv.Atoi\(r.URL.Query\(\).Get\("id"\)\)) s
5 129 M
(    if err != nil || id < 1 {) s
5 118 M
(        app.notFound\(w\)) s
5 107 M
(        return) s
5 96 M
(    }) s
5 74 M
(    s, err := app.snippets.Get\(id\)) s
5 63 M
(    if err != nil {) s
5 52 M
(        if errors.Is\(err, models.ErrNoRecord\) {) s
5 41 M
(            app.notFound\(w\)) s
5 30 M
(        } else {) s
5 19 M
(            app.serverError\(w, err\)) s
5 8 M
(        }) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
24 24 translate
/pagenum 5 def
/fname (cmd/web/handlers.go) def
/fdir (cmd/web) def
/ftail (handlers.go) def
% User defined strings:
/pagenumstr (5) def
/moddatestr (07/16/20) def
/modtimestr (13:19:40) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(        return) s
5 734 M
(    }) s
5 723 M
(    js, err := json.MarshalIndent\(s, "", "\\t"\)) s
5 712 M
(    if err != nil {) s
5 701 M
(        http.Error\(w, err.Error\(\), http.StatusInternalServerError\)) s
5 690 M
(        return) s
5 679 M
(    }) s
5 668 M
(    //fmt.Fprintf\(w, "%v", s\)) s
5 657 M
(    w.Header\(\).Set\("Content-Type", "application-json; charset=utf-8"\)) s
5 646 M
(    w.Write\(js\)) s
5 635 M
(}) s
5 613 M
(//----------) s
5 591 M
(func \(app *application\) createSnippet\(w http.ResponseWriter, r *http.Request\) {) s
5 580 M
(    if r.Method != http.MethodPost {) s
5 569 M
(        w.Header\(\).Set\("Allow", http.MethodPost\)) s
5 558 M
(        http.Error\(w, "Method Not Allowed", 405\)) s
5 547 M
(        return) s
5 536 M
(    }) s
5 514 M
(    title := "O snail") s
5 503 M
(    content := "O snail\\nBut slowly, slowly!\\n\\n\342\\200\\223 Kobayashi Issa") s
5 492 M
(    expires := "7") s
5 470 M
(    id, err := app.snippets.Insert\(title, content, expires\)) s
5 459 M
(    if err != nil {) s
5 448 M
(        app.serverError\(w, err\)) s
5 437 M
(        return) s
5 426 M
(    }) s
5 404 M
(    http.Redirect\(w, r, fmt.Sprintf\("/snippet?id=%d", id\), http.StatusSeeOther\)) s
5 382 M
(}) s
_R
S
%%Page: (1) 6
%%BeginPageSetup
_S
24 24 translate
/pagenum 1 def
/fname (cmd/web/helpers.go) def
/fdir (cmd/web) def
/ftail (helpers.go) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (07/15/20) def
/modtimestr (23:26:33) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(package main) s
5 723 M
(import \() s
5 712 M
(    "bytes") s
5 701 M
(    "fmt") s
5 690 M
(    "net/http") s
5 679 M
(    "runtime/debug") s
5 668 M
(    "time") s
5 657 M
(\)) s
5 635 M
(// Create an addDefaultData helper. This takes a pointer to a templateData) s
5 624 M
(// struct, adds the current year to the CurrentYear field, and then returns) s
5 613 M
(// the pointer. Again, we're not using the *http.Request parameter at the) s
5 602 M
(// moment, but we will do later in the book.) s
5 591 M
(func \(app *application\) addDefaultData\(td *templateData, r *http.Request\) *templateData {) s
5 580 M
(    if td == nil {) s
5 569 M
(        td = &templateData{}) s
5 558 M
(    }) s
5 547 M
(    td.CurrentYear = time.Now\(\).Year\(\)) s
5 536 M
(    return td) s
5 525 M
(}) s
5 503 M
(func \(app *application\) serverError\(w http.ResponseWriter, err error\) {) s
5 492 M
(    trace := fmt.Sprintf\("%s\\n%s", err.Error\(\), debug.Stack\(\)\)) s
5 481 M
(    app.errorLog.Println\(trace\)) s
5 470 M
(    http.Error\(w, http.StatusText\(http.StatusInternalServerError\), http.StatusInternalSer) s
5 459 M
(verError\)) s
5 448 M
(}) s
5 426 M
(func \(app *application\) clientError\(w http.ResponseWriter, status int\) {) s
5 415 M
(    http.Error\(w, http.StatusText\(status\), status\)) s
5 404 M
(}) s
5 382 M
(func \(app *application\) notFound\(w http.ResponseWriter\) {) s
5 371 M
(    app.clientError\(w, http.StatusNotFound\)) s
5 360 M
(}) s
5 338 M
(func \(app *application\) render\(w http.ResponseWriter, r *http.Request, name string, td *t) s
5 327 M
(emplateData\) {) s
5 316 M
(    ts, ok := app.templateCache[name]) s
5 305 M
(    if !ok {) s
5 294 M
(        app.serverError\(w, fmt.Errorf\("The template %s does not exist", name\)\)) s
5 283 M
(        return) s
5 272 M
(    }) s
5 250 M
(    // Need to make the template render a two-stage process. First, we should make a \342) s
5 239 M
(\\200\\230trial\342\\200\\231 render by writing the template into a buffer. If this fails, we ca) s
5 228 M
(n respond to the user with an error message. But if it works, we can then write the conte) s
5 217 M
(nts of the buffer to our http.ResponseWriter.) s
5 195 M
(    // Initialize a new buffer.) s
5 184 M
(    buf := new\(bytes.Buffer\)) s
5 162 M
(    // Write the template to the buffer, instead of straight to the) s
5 151 M
(    // http.ResponseWriter. If there's an error, call our serverError helper and then) s
5 140 M
(    // return.) s
5 129 M
(    //) s
5 118 M
(    // Execute the template set, passing the dynamic data with the current) s
5 107 M
(    // year injected.) s
5 96 M
(    //err := ts.Execute\(buf, td\)) s
5 85 M
(    err := ts.Execute\(buf, app.addDefaultData\(td, r\)\)) s
5 74 M
(    if err != nil {) s
5 63 M
(        app.serverError\(w, err\)) s
5 52 M
(        return) s
5 41 M
(    }) s
5 19 M
(    // Write the contents of the buffer to the http.ResponseWriter. Again, this) s
5 8 M
(    // is another time where we pass our http.ResponseWriter to a function that) s
_R
S
%%Page: (2) 7
%%BeginPageSetup
_S
24 24 translate
/pagenum 2 def
/fname (cmd/web/helpers.go) def
/fdir (cmd/web) def
/ftail (helpers.go) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (07/15/20) def
/modtimestr (23:26:33) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(    // takes an io.Writer.) s
5 734 M
(    buf.WriteTo\(w\)) s
5 712 M
(}) s
_R
S
%%Page: (1) 8
%%BeginPageSetup
_S
24 24 translate
/pagenum 1 def
/fname (cmd/web/main.go) def
/fdir (cmd/web) def
/ftail (main.go) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (07/16/20) def
/modtimestr (11:48:23) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(package main) s
5 723 M
(import \() s
5 712 M
(    "database/sql") s
5 701 M
(    "flag") s
5 690 M
(    "fmt") s
5 679 M
(    "html/template") s
5 668 M
(    "log") s
5 657 M
(    "net/http") s
5 646 M
(    "os") s
5 624 M
(    "github.com/gbih/snippetbox/pkg/models/postgres") s
5 613 M
(    _ "github.com/lib/pq") s
5 602 M
(\)) s
5 580 M
(type neuteredFileSystem struct {) s
5 569 M
(    fs http.FileSystem) s
5 558 M
(}) s
5 536 M
(type Config struct {) s
5 525 M
(    Addr      string) s
5 514 M
(    StaticDir string) s
5 503 M
(}) s
5 481 M
(type application struct {) s
5 470 M
(    errorLog      *log.Logger) s
5 459 M
(    infoLog       *log.Logger) s
5 448 M
(    snippets      *postgres.SnippetModel) s
5 437 M
(    templateCache map[string]*template.Template) s
5 426 M
(}) s
5 404 M
(func openDB\(dsn string\) \(*sql.DB, error\) {) s
5 393 M
(    db, err := sql.Open\("postgres", dsn\)) s
5 382 M
(    if err != nil {) s
5 371 M
(        return nil, err) s
5 360 M
(    }) s
5 349 M
(    if err = db.Ping\(\); err != nil {) s
5 338 M
(        return nil, err) s
5 327 M
(    }) s
5 316 M
(    return db, nil) s
5 305 M
(}) s
5 283 M
(func main\(\) {) s
5 261 M
(    cfg := new\(Config\)) s
5 250 M
(    flag.StringVar\(&cfg.Addr, "addr", ":4000", "HTTP network address"\)) s
5 228 M
(    dsn := flag.String\("dsn", "postgres://postgres:postgres@localhost/snippetbox?sslmode=) s
5 217 M
(disable", "Postgres data source name"\)) s
5 195 M
(    flag.Parse\(\)) s
5 173 M
(    infoLog := log.New\(os.Stdout, "INFO\\t", log.Ldate|log.Ltime\)) s
5 162 M
(    errorLog := log.New\(os.Stderr, "ERROR\\t", log.Ldate|log.Ltime|log.Lshortfile\)) s
5 140 M
(    db, err := openDB\(*dsn\)) s
5 129 M
(    if err != nil {) s
5 118 M
(        errorLog.Fatal\(err\)) s
5 107 M
(    }) s
5 96 M
(    defer db.Close\(\)) s
5 74 M
(    templateCache, err := newTemplateCache\("./ui/html/"\)) s
5 63 M
(    if err != nil {) s
5 52 M
(        errorLog.Fatal\(err\)) s
5 41 M
(    }) s
5 19 M
(    app := &application{) s
5 8 M
(        errorLog:      errorLog,) s
_R
S
%%Page: (2) 9
%%BeginPageSetup
_S
24 24 translate
/pagenum 2 def
/fname (cmd/web/main.go) def
/fdir (cmd/web) def
/ftail (main.go) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (07/16/20) def
/modtimestr (11:48:23) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(        infoLog:       infoLog,) s
5 734 M
(        snippets:      &postgres.SnippetModel{DB: db},) s
5 723 M
(        templateCache: templateCache,) s
5 712 M
(    }) s
5 690 M
(    fmt.Println\("**** templateCache: ", app.templateCache\)) s
5 668 M
(    srv := &http.Server{) s
5 657 M
(        Addr:     cfg.Addr,) s
5 646 M
(        ErrorLog: errorLog,) s
5 635 M
(        Handler:  app.routes\(\),) s
5 624 M
(    }) s
5 602 M
(    infoLog.Printf\("http://localhost%v/original", cfg.Addr\)) s
5 591 M
(    infoLog.Printf\("http://localhost%v", cfg.Addr\)) s
5 580 M
(    infoLog.Printf\("curl 'http://localhost%v/api/v1/test'", cfg.Addr\)) s
5 569 M
(    infoLog.Printf\("curl 'http://localhost%v/api/v1/snippet?id=3'", cfg.Addr\)) s
5 547 M
(    err = srv.ListenAndServe\(\)) s
5 536 M
(    errorLog.Fatal\(err\)) s
5 514 M
(}) s
5 492 M
(// go run ./cmd/web >> ./logs/info.log 2>> ./logs/error.log) s
_R
S
%%Page: (1) 10
%%BeginPageSetup
_S
24 24 translate
/pagenum 1 def
/fname (cmd/web/routes.go) def
/fdir (cmd/web) def
/ftail (routes.go) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (07/16/20) def
/modtimestr (09:04:20) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(package main) s
5 723 M
(import \() s
5 712 M
(    "net/http") s
5 701 M
(\)) s
5 679 M
(func \(app *application\) routes\(\) *http.ServeMux {) s
5 657 M
(    mux := http.NewServeMux\(\)) s
5 646 M
(    mux.HandleFunc\("/", app.home\)) s
5 635 M
(    mux.HandleFunc\("/original", app.homeOriginal\)) s
5 624 M
(    mux.HandleFunc\("/snippet", app.showSnippet\)) s
5 613 M
(    mux.HandleFunc\("/snippet/create", app.createSnippet\)) s
5 591 M
(    fileServer := http.FileServer\(neuteredFileSystem{http.Dir\("./ui/static/"\)}\)) s
5 580 M
(    mux.Handle\("/static/", http.StripPrefix\("/static", fileServer\)\)) s
5 558 M
(    // APIs) s
5 547 M
(    mux.HandleFunc\("/api/v1/snippet", app.apiShowSnippet\)) s
5 536 M
(    mux.HandleFunc\("/api/v1/test", app.apiTest\)) s
5 525 M
(    mux.HandleFunc\("/api/v1/home", app.apiHome\)) s
5 503 M
(    return mux) s
5 492 M
(}) s
_R
S
%%Page: (1) 11
%%BeginPageSetup
_S
24 24 translate
/pagenum 1 def
/fname (cmd/web/templates.go) def
/fdir (cmd/web) def
/ftail (templates.go) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (07/16/20) def
/modtimestr (08:48:31) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(package main) s
5 723 M
(import \() s
5 712 M
(    "html/template") s
5 701 M
(    "path/filepath") s
5 690 M
(    "time") s
5 668 M
(    "github.com/gbih/snippetbox/pkg/models") s
5 657 M
(\)) s
5 635 M
(type templateData struct {) s
5 624 M
(    CurrentYear int) s
5 613 M
(    Snippet     *models.Snippet) s
5 602 M
(    Snippets    []*models.Snippet) s
5 591 M
(}) s
5 569 M
(func humanDate\(t time.Time\) string {) s
5 558 M
(    return t.Format\("02 Jan 2006 at 15:04"\)) s
5 547 M
(}) s
5 525 M
(var functions = template.FuncMap{) s
5 514 M
(    "humanDate": humanDate,) s
5 503 M
(}) s
5 481 M
(func newTemplateCache\(dir string\) \(map[string]*template.Template, error\) {) s
5 459 M
(    cache := map[string]*template.Template{}) s
5 437 M
(    pages, err := filepath.Glob\(filepath.Join\(dir, "*.page.html"\)\)) s
5 426 M
(    if err != nil {) s
5 415 M
(        return nil, err) s
5 404 M
(    }) s
5 382 M
(    for _, page := range pages {) s
5 371 M
(        name := filepath.Base\(page\)) s
5 349 M
(        // The template.FuncMap must be registered with the template set before you) s
5 338 M
(        // call the ParseFiles\(\) method. This means we have to use template.New\(\) to) s
5 327 M
(        // create an empty template set, use the Funcs\(\) method to register the) s
5 316 M
(        // template.FuncMap, and then parse the file as normal.) s
5 305 M
(        //ts, err := template.ParseFiles\(page\)) s
5 294 M
(        ts, err := template.New\(name\).Funcs\(functions\).ParseFiles\(page\)) s
5 283 M
(        if err != nil {) s
5 272 M
(            return nil, err) s
5 261 M
(        }) s
5 239 M
(        ts, err = ts.ParseGlob\(filepath.Join\(dir, "*.layout.html"\)\)) s
5 228 M
(        if err != nil {) s
5 217 M
(            return nil, err) s
5 206 M
(        }) s
5 184 M
(        ts, err = ts.ParseGlob\(filepath.Join\(dir, "*.partial.html"\)\)) s
5 173 M
(        if err != nil {) s
5 162 M
(            return nil, err) s
5 151 M
(        }) s
5 129 M
(        cache[name] = ts) s
5 118 M
(    }) s
5 96 M
(    return cache, nil) s
5 85 M
(}) s
_R
S
%%Page: (1) 12
%%BeginPageSetup
_S
24 24 translate
/pagenum 1 def
/fname (pkg/models/models.go) def
/fdir (pkg/models) def
/ftail (models.go) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (07/15/20) def
/modtimestr (10:57:12) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(package models) s
5 723 M
(import \() s
5 712 M
(    "errors") s
5 701 M
(    "time") s
5 690 M
(\)) s
5 668 M
(var ErrNoRecord = errors.New\("models: no matching record found"\)) s
5 646 M
(type Snippet struct {) s
5 635 M
(    ID      int) s
5 624 M
(    Title   string) s
5 613 M
(    Content string) s
5 602 M
(    Created time.Time) s
5 591 M
(    Expires time.Time) s
5 580 M
(}) s
_R
S
%%Page: (1) 13
%%BeginPageSetup
_S
24 24 translate
/pagenum 1 def
/fname (pkg/models/postgres/snippets.go) def
/fdir (pkg/models/postgres) def
/ftail (snippets.go) def
% User defined strings:
/pagenumstr (1) def
/moddatestr (07/15/20) def
/modtimestr (21:51:24) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(package postgres) s
5 723 M
(import \() s
5 712 M
(    "database/sql") s
5 701 M
(    "errors") s
5 679 M
(    "github.com/gbih/snippetbox/pkg/models") s
5 668 M
(\)) s
5 646 M
(type SnippetModel struct {) s
5 635 M
(    DB *sql.DB) s
5 624 M
(}) s
5 602 M
(func \(m *SnippetModel\) Insert\(title, content, expires string\) \(int, error\) {) s
5 580 M
(    var id int) s
5 558 M
(    stmt := `INSERT INTO snippets) s
5 547 M
(    \(title, content, created, expires\)) s
5 536 M
(    VALUES) s
5 525 M
(    \($1, $2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP + INTERVAL '1 DAY' * $3\)) s
5 514 M
(    RETURNING id`) s
5 492 M
(    err := m.DB.QueryRow\(stmt, title, content, expires\).Scan\(&id\)) s
5 470 M
(    if err != nil {) s
5 459 M
(        return 0, err) s
5 448 M
(    }) s
5 426 M
(    return int\(id\), nil) s
5 404 M
(}) s
5 382 M
(func \(m *SnippetModel\) Get\(id int\) \(*models.Snippet, error\) {) s
5 360 M
(    stmt := `SELECT id, title, content, created, expires FROM snippets) s
5 349 M
(    WHERE expires > CURRENT_TIMESTAMP AND id = $1`) s
5 327 M
(    row := m.DB.QueryRow\(stmt, id\)) s
5 316 M
(    s := &models.Snippet{}) s
5 294 M
(    err := row.Scan\(&s.ID, &s.Title, &s.Content, &s.Created, &s.Expires\)) s
5 283 M
(    if err != nil {) s
5 272 M
(        if errors.Is\(err, sql.ErrNoRows\) {) s
5 261 M
(            return nil, models.ErrNoRecord) s
5 250 M
(        } else {) s
5 239 M
(            return nil, err) s
5 228 M
(        }) s
5 217 M
(    }) s
5 195 M
(    return s, nil) s
5 184 M
(}) s
5 162 M
(func \(m *SnippetModel\) Latest\(\) \([]*models.Snippet, error\) {) s
5 151 M
(    stmt := `SELECT id, title, content, created, expires FROM snippets) s
5 140 M
(    WHERE expires > CURRENT_TIMESTAMP ORDER BY created DESC LIMIT 3`) s
5 118 M
(    rows, err := m.DB.Query\(stmt\)) s
5 107 M
(    if err != nil {) s
5 96 M
(        return nil, err) s
5 85 M
(    }) s
5 74 M
(    defer rows.Close\(\)) s
5 52 M
(    snippets := []*models.Snippet{}) s
5 30 M
(    for rows.Next\(\) {) s
5 19 M
(        s := &models.Snippet{}) s
_R
S
%%Page: (2) 14
%%BeginPageSetup
_S
24 24 translate
/pagenum 2 def
/fname (pkg/models/postgres/snippets.go) def
/fdir (pkg/models/postgres) def
/ftail (snippets.go) def
% User defined strings:
/pagenumstr (2) def
/moddatestr (07/15/20) def
/modtimestr (21:51:24) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 745 M
(        err := rows.Scan\(&s.ID, &s.Title, &s.Content, &s.Created, &s.Expires\)) s
5 734 M
(        if err != nil {) s
5 723 M
(            return nil, err) s
5 712 M
(        }) s
5 690 M
(        snippets = append\(snippets, s\)) s
5 679 M
(    }) s
5 657 M
(    if err = rows.Err\(\); err != nil {) s
5 646 M
(        return nil, err) s
5 635 M
(    }) s
5 613 M
(    return snippets, nil) s
5 602 M
(}) s
_R
S
%%Trailer
%%Pages: 14
%%DocumentNeededResources: font Times-Roman Courier-Bold Courier 
%%+ font Times-Bold 
%%EOF
